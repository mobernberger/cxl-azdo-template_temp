variables:
  terraformDocsVersion: "0.17.0"
  terraformVersion: "1.7.4"

pool:
  vmImage: ubuntu-latest

stages:
  - stage: UpdateTerraformFormatting
    jobs:
    - job: Update_Terraform_Formatting
      steps:
        - checkout: self
          persistCredentials: "true"

        #Terraform-docs automation
        - script: |
            wget https://github.com/terraform-docs/terraform-docs/releases/download/v$(terraformDocsVersion)/terraform-docs-v$(terraformDocsVersion)-linux-amd64.tar.gz
            tar -xvf terraform-docs-v$(terraformDocsVersion)-linux-amd64.tar.gz
            sudo mv terraform-docs /usr/local/bin/
          displayName: 'Install terraform-docs'
        - script: |
            # Set Modules Root Directory
            root_dir="$(Build.SourcesDirectory)/"

            # Get all subdirectories (Terraform module directories)            
            terraformModuleDirs=$(find $root_dir -maxdepth 0 -type d -not -path '*/.git/*' -not -path '*/.azdo-pipelines/*' -not -path '*/.infracost/*' -not -path '*/examples')

            # Loop through each directory to cleanup/remove old README files
            for dir in $terraformModuleDirs; do
                # Get all files in the directory
                readMeFiles=$(find "$dir" -name "README.md")

                # Loop through each file in each Terraform module
                for file in $readMeFiles; do
                    # Check if README file already exists and remove
                    if [ -f "$file" ]; then
                        # Remove the file
                        rm -f "$file"
                        echo "Old file $(basename "$file") removed from $(realpath "$dir")"
                    fi
                done

                #After cleanup create a new README.md file with 'terraform-docs' based on latest TF module code in current folder(terraform module)
                tfFiles=$(find "$dir" -name "*.tf")

                if [ "$(echo "$tfFiles" | wc -l)" -gt 0 ]; then
                    # Create new README.md file
                    terraform-docs markdown table $(realpath "$dir") --output-file "$dir/README.md"
                else
                    echo "No .tf files found."
                fi
            done
          displayName: 'Cleanup and Generate new README for each TF module'

        #Terraform FMT
        - script: |
            sudo apt install unzip
            wget https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
            unzip terraform_$(terraformVersion)_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
          displayName: 'Install terraform'
        - script: |
            root_dir="$(Build.SourcesDirectory)/"
            terraform fmt -recursive
          displayName: 'Run terraform fmt'

        #Commit and push updated files for TF modules.
        - script: |
            git config --local user.email "terraform-pipeline-update@cloudxcelerate.io"
            git config --local user.name "Terraform Files Pipeline Update"
            git add "*.md" "*.tf"
            git commit -m "Update Terraform files"
            git push origin HEAD:$(Build.SourceBranchName)
            # Fetch the latest tags from the remote repository
            git fetch --tags
            # Get the latest tag
            latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
            # Delete the remote tag
            git push --delete origin $latest_tag
            # Delete the local tag
            git tag -d $latest_tag
            # Create a new tag with the same name pointing to the latest commit
            git tag $latest_tag
            # Push the new tag to the remote repository
            git push origin $latest_tag
          displayName: 'Commit and Push updated Terraform files for module directory'
